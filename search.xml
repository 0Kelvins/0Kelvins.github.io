<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[【SQL】历史表及历史查询]]></title>
    <url>%2Fpost%2Fad7c26a4.html</url>
    <content type="text"><![CDATA[场景存在原子记录表，数据量月累计最大千万，不能使用分区，不至于分布式存储，于是使用历史记录转存历史表方案 流程 动态创建历史表，并转存历史数据的存储过程 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950CREATE PROCEDURE [dbo].[P_W_QuestionHisRedeposit]ASBEGIN DECLARE @lastMonth DATETIME, @tableDate NVARCHAR(10), @tableName NVARCHAR(50), @sql NVARCHAR(2000), @error INT; SET @lastMonth = DATEADD(MONTH, -1, GETDATE()); -- 上月同一天 SET @tableDate = CONVERT(VARCHAR(10), DATEADD(MONTH, DATEDIFF(MONTH, 0, @lastMonth), 0), 120); -- 上月第一天 SET @tableName = '[dbo].[Question_His_' + @tableDate + ']'; -- 历史表名 SET @error = 0; -- 是否有错 -- 检查历史表是否已存在，月定时作业执行，应不会重复 IF NOT EXISTS(SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(@tableName) AND type IN (N'U')) BEGIN BEGIN TRY BEGIN TRANSACTION -- 建表 SET @sql = 'CREATE TABLE ' + @tableName + ' ( [Id] [INT], [QuestionID] [VARCHAR](500), [Answers] [VARCHAR](MAX), [Result] [FLOAT], [UserID] [VARCHAR](100), [RecordTime] [DATETIME] )'; EXECUTE(@sql); SET @error = @error + @@ERROR; -- 转存前一个月的历史数据 SET @sql = 'INSERT INTO '+ @tableName +' SELECT * FROM [dbo].[Question_His]' + ' WHERE DATEDIFF(MONTH, [RecordTime], GETDATE()) &gt;= 1'; EXECUTE(@sql); SET @error = @error + @@ERROR; -- 删除历史表一个月前数据 SET @sql = 'DELETE FROM [dbo].[Question_His] WHERE DATEDIFF(MONTH, [RecordTime], GETDATE()) &gt;= 1'; EXECUTE(@sql); SET @error = @error + @@ERROR; COMMIT END TRY BEGIN CATCH IF @@TRANCOUNT &gt; 0 -- 失败回滚 ROLLBACK DECLARE @ErrMsg NVARCHAR(4000), @ErrSeverity INT SELECT @ErrMsg = ERROR_MESSAGE(), @ErrSeverity = ERROR_SEVERITY() RAISERROR(@ErrMsg, @ErrSeverity, 1) END CATCH ENDEND 创建每月作业，创建执行转存历史的存储过程，建议使用DBMS操作，简单方便 入口：SQL Server 代理 -&gt; 新建作业 关键的地方： 2.1 新建步骤【选择T-SQL; 选择执行数据库; 命令如下;】 1EXEC [dbo].[P_W_LP_QuestionHisRedeposit] 2.2 新建计划 -&gt; 频率，执行：天 1 每 1 个月， 历史数据查询存储过程，使用时间筛选查询表 12345678910111213141516171819202122232425262728293031323334353637383940414243CREATE PROC [dbo].[P_HisTableQuery](@TableNamePrefix NVARCHAR(100), -- 历史表名@TimeColumnName NVARCHAR(100), -- 时间列@FromTime DATETIME, -- 开始时间@ToTime DATETIME, -- 截止时间@QueryCondition NVARCHAR(MAX) = '' -- 其他查询条件，要格外注意字符串的引号转义问题)ASBEGIN DECLARE @tableName NVARCHAR(100), @sql NVARCHAR(max) SET @tableName = '' SET @sql = '' -- 查出时间内所有历史表名 DECLARE t_cursor CURSOR FOR SELECT name FROM sys.tables WHERE name IN ( SELECT name FROM sys.tables WHERE name = @TableNamePrefix UNION SELECT name FROM sys.tables WHERE name LIKE @TableNamePrefix+'_%' AND ISDATE(RIGHT(name, 10)) = 1 AND CONVERT(DATETIME, CAST(RIGHT(name, 10) AS VARCHAR(10)), 120) &gt;= @FromTime AND CONVERT(DATETIME, CAST(RIGHT(name, 10) AS VARCHAR(10)), 120) &lt;= @ToTime ) -- 拼接各历史表查询结果 OPEN t_cursor FETCH NEXT FROM t_cursor INTO @tableName WHILE @@FETCH_STATUS = 0 BEGIN SET @sql += + ' UNION SELECT * FROM [' + @tableName + ']' + ' WHERE [' + @TimeColumnName + '] &gt;= ''' + CONVERT(VARCHAR(20), @FromTime, 120) + '''' + ' AND [' + @TimeColumnName + '] &lt;= ''' + CONVERT(VARCHAR(20), @ToTime, 120) + '''' + @QueryCondition FETCH NEXT FROM t_cursor INTO @tableName END CLOSE t_cursor DEALLOCATE t_cursor SET @sql = SUBSTRING(@sql, 7, LEN(@sql)); -- 截掉最开始的UNION，可以重复使用UNION ALL EXEC(@sql)END 小结有条件（可以分区or搞分布式）就不要这样搞，开发维护起来太麻烦了(╯‵□′)╯︵┻━┻]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>分表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【SQL】批量建库分区]]></title>
    <url>%2Fpost%2F170e08d7.html</url>
    <content type="text"><![CDATA[环境SQL Server 2008 R2 说明表分区过程是为单个数据库建立多个 文件组（夹） 及里面的 文件 ，然后把表内数据按照 分区函数 和 方案 ，放到不同的数据库文件里。通过这样的处理，使得表的数据、索引等分成多个部分，缓解单表过大导致检索太慢等问题。 流程及脚本1. 建库、文件组及文件建库前要求先建好目录，然后修改下面脚本建立自己的库（注意下面脚本反斜杠替换为单个） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102USE masterGODECLARE @DbName VARCHAR(max), @Path NVARCHAR(1000), @InitSize VARCHAR(50), @FileGrowth VARCHAR(50)SELECT @Path = 'D:\\PulicDataBase\\', -- 指定根路径(\\, hight light fix, 请自行替换为单反斜杠，下同) @InitSize = '5MB', @FileGrowth = '10%';-- 指定数据库名称，多个用逗号隔开SELECT @DbName = 'DBTest, DBTest2'; BEGIN -- 定义数据库名称临时表@temp DECLARE @temp TABLE ( ID INT IDENTITY(1,1), --自动编号（获知顺序） Result VARCHAR(MAX) --拆分后结果 ); DECLARE @i INT, @SourceSql VARCHAR(max), @target NVARCHAR(MAX), @StrSeprate VARCHAR(10) SELECT @SourceSql = LTRIM(RTRIM(@DbName)), @StrSeprate=',' --指定源字符串、分隔符 IF RIGHT(@SourceSql, LEN(@StrSeprate)) &lt;&gt; @StrSeprate SET @SourceSql= @SourceSql + @StrSeprate SET @i = CHARINDEX(@StrSeprate,@SourceSql) WHILE @i &gt;= 1 BEGIN SET @target = LTRIM(RTRIM(left(@SourceSql, @i-1))) IF @target IS NOT NULL AND @target &lt;&gt; '' INSERT @temp VALUES(@target) ELSE INSERT @temp VALUES(NULL) SET @SourceSql = SUBSTRING(@SourceSql, @i+1, LEN(@SourceSql)-@i) SET @i = CHARINDEX(@StrSeprate,@SourceSql) END --开始遍历@temp建库 DECLARE @DataBaseName NVARCHAR(50), @sql NVARCHAR(MAX), @DBPath NVARCHAR(500) DECLARE @i_Group INT --文件组个数 DECLARE @Flag VARCHAR(10) --数据库标识 IF RTRIM(LTRIM(ISNULL(@Path, ''))) = '' SET @Path = 'D:\\PulicDataBase\\' SET @Path = RTRIM(LTRIM(@Path)) IF RIGHT(@Path, 1) &lt;&gt; '\\' SET @Path = @Path + '\\' SELECT * FROM @temp DECLARE db_cursor CURSOR FOR SELECT Result FROM @temp WHERE ISNULL(Result, '') &lt;&gt; '' ORDER BY ID --开始游标 OPEN db_cursor FETCH NEXT FROM db_cursor INTO @DataBaseName WHILE @@fetch_status = 0 BEGIN BEGIN TRY IF CHARINDEX('DBTest', @DataBaseName) &gt; 0 SET @DBPath = @Path + 'DBTest' + '\\' --数据库目录 IF EXISTS(SELECT * FROM sysdatabases WHERE name = @DataBaseName) BEGIN PRINT '【创建数据库】'+ @DataBaseName +'已存在，不必重复创建！' FETCH NEXT FROM db_cursor INTO @DataBaseName CONTINUE; END ELSE BEGIN SET @sql='create database ['+ @DataBaseName + '] on primary ( name=N'''+ @DataBaseName +''', filename=N'''+ @DBPath + @DataBaseName +'.mdf'', size='+ @InitSize +', filegrowth='+ @FileGrowth +' ) log on ( name=N'''+ @DataBaseName +'_Log'', filename=N'''+ @DBPath + @DataBaseName +'_Log.ldf'', size='+ @InitSize +', filegrowth='+ @FileGrowth +' )' EXECUTE (@sql) PRINT '【创建数据库】'+ @DataBaseName +'创建成功！' END --创建指定数据库文件组及文件 SELECT @i_Group = 1, @Flag = '1' IF CHARINDEX(','+ @DataBaseName +',',','+ 'DBTest, DBTest2' +',') &gt; 0 BEGIN WHILE @i_Group&lt;=11 BEGIN SET @sql = 'IF NOT EXISTS(SELECT * FROM sysfilegroups sp_helpfilegroup WHERE groupname = ''FileGroup_' + @Flag + '_' + CAST(@i_Group AS VARCHAR(10)) +''') ' + 'ALTER DATABASE ['+ @DataBaseName +'] ADD FILEGROUP FileGroup_' + @Flag + '_' + CAST(@i_Group AS VARCHAR(10)) + ' ' + 'IF NOT EXISTS(SELECT * FROM sys.database_files WHERE name = ''' + @DataBaseName + '_File_' + CAST(@i_Group AS VARCHAR(10)) +''') ' + 'ALTER DATABASE ['+ @DataBaseName +'] ADD FILE (name = ''' + @DataBaseName + '_File_' + CAST(@i_Group AS VARCHAR(10)) +''', filename = ''' + @DBPath + @DataBaseName + '_File_' + CAST(@i_Group AS VARCHAR(10)) + '.mdf'', maxsize = UNLIMITED, filegrowth = 10%) to filegroup [FileGroup_' + @Flag + '_' + CAST(@i_Group AS VARCHAR(10)) +']' EXECUTE (@sql) SET @i_Group = @i_Group + 1 END END END TRY BEGIN CATCH PRINT '【创建数据库】'+ @DataBaseName + '创建时出错：' + ERROR_MESSAGE() FETCH NEXT FROM db_cursor INTO @DataBaseName CONTINUE END CATCH FETCH NEXT FROM db_cursor INTO @DataBaseName END CLOSE db_cursor DEALLOCATE db_cursorENDGO 2. 创建分区函数及方案123456789101112131415161718USE DBTestGO-- 表分区函数IF NOT EXISTS (SELECT * FROM sys.partition_functions WHERE name='PF_PRE_FIVEMILLOIN')BEGIN CREATE PARTITION FUNCTION PF_PRE_FIVEMILLOIN(INT) AS RANGE LEFT FOR VALUES(5000000, 10000000, 15000000, 20000000, 25000000, 30000000, 35000000, 40000000, 45000000, 50000000)END--表分区方案IF NOT EXISTS (SELECT * FROM sys.partition_schemes WHERE name='PS_ALL_GROUP')BEGIN CREATE PARTITION SCHEME PS_ALL_GROUP AS PARTITION PF_PRE_FIVEMILLOIN TO (FileGroup_843_1, FileGroup_843_2, FileGroup_843_3, FileGroup_843_4, FileGroup_843_5, FileGroup_843_6, FileGroup_843_7, FileGroup_843_8, FileGroup_843_9, FileGroup_843_10, FileGroup_843_11)ENDGO 3. 建表，使用分区索引1234567891011121314151617181920212223--建表IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[T_Test]') AND type IN (N'U'))BEGINCREATE TABLE [dbo].T_Test( [Id] [INT] NOT NULL, [No] [VARCHAR](50) NOT NULL, [Name] [VARCHAR](1000) NULL, [RecordTime] [DATETIME] NOT NULL, CONSTRAINT [PK_T_Test] PRIMARY KEY CLUSTERED ( [Id] ASC ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PS_ALL_GROUP]([Id]) )ENDGO-- 索引IF NOT EXISTS (SELECT * FROM SYSINDEXES WHERE NAME='IX_T_Test_No_Time') CREATE NONCLUSTERED INDEX IX_T_Test_No_Time ON [dbo].[T_Test ] ( [No] ASC, [RecordTime] DESC )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PS_ALL_GROUP]([Id])GO 4. 查看表各分区记录情况123SELECT $partition.PF_PRE_FIVEMILLOIN(Id) AS PartitionNumber, count(*) AS RecordCountFROM T_TestGROUP BY $partition.PF_PRE_FIVEMILLOIN(Id) 小记在目前项目中，某些数据会存在积累速度快，但是需要长时间保存的情况，所以为对应表进行分区。如果所有的表都有大数据的压力，那就考虑数据库集群吧。 考虑到单表数据量还是不会减少，所以这并不能满足大数据量的单表做到用户是实时交互体验，如果有必要，需要做部分数据缓存，如果要统计需要做定时统计结果缓存等等。 分区数量最好考虑到服务器的CPU核数，考虑索引和分区函数方案的效果等等。 如果数据不能清理，始终会增加，考虑按月按年分区，可以使用作业计划调用动态建立文件（组）及表分区的存储过程来实现。]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>分区</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【Jmeter】4.0的安装]]></title>
    <url>%2Fpost%2Fa1d9e130.html</url>
    <content type="text"><![CDATA[简述Jmeter4.0与前面的版本有所不一样，所有的插件由新的插件管理器下载，收集服务器性能信息的包也有点难找，远程脚本调试的配置也有点小坑 过程 官网下载，解压到自己的目录（最好没空格的路径），将bin目录添加至环境变量（可选） 修改配置文件 jmeter.properties ，搜索配置项进行修改 12345language=zh_CN # 默认UI语言remote_hosts=172.16.41.34:1099 # 一定是正在运行的所有服务，如果有没启动的服务会报错，坑。server_port=1099 # RMI通信端口，被远程的服务器需要换端口改这个#server.rmi.localport=1089 # 服务器端用于指定本地端口，默认随机可用端口，不是上面remote的端口！ 插件安装：https://jmeter-plugins.org/downloads/all/ Download plugins-manager.jar and put it into lib/ext directory, then restart JMeter. 3.1 将下载的 plugins-manager.jar 放到jmeter的 lib/ext 目录下，重启后 3.2 选项-&gt;Plugins Manager-&gt;Available Plugins-&gt;PerfMon (Servers Performance Monitoring)(勾选)-&gt;Apply… 安装PerfMon服务器端客户端，根据插件说明文档：https://jmeter-plugins.org/wiki/PerfMon/ InstallationServer Agent tool detailed description is placed here. 找到服务器收集性能数据的包 Server Agent，下载并安装到服务器 服务器端安装jmeter，用于远程脚本执行，配置注意 server_port 要于你客户端配置的 remote_hosts 里一样，客户端要注意如果出现 java.rmi.ConnectException: Connection refused to host: (your server ip); nested exception is:java.net.ConnectException: Connection timed out: connect 那么你的 remote_hosts 配置中的一个服务器端jmeter可能没有启动 记搭环境什么的最坑了Orz。]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>Jemeter</tag>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【Vue】模块化项目构建]]></title>
    <url>%2Fpost%2F1a0d7b20.html</url>
    <content type="text"><![CDATA[Vue + Typescript 模块化项目的构建得益于 vue-cli 3.0 多了 create，项目构建变得非常的简单了 构建主要步骤 默认已经有 node.js 环境，最好8+版本 安装 vue-cli 3.0 1.0 卸载旧版2.x版本，如果有的话 1.1 npm i -g @vue/cli，（chromedriver可能安装失败，需要从taobao镜像安装缓存，然后再安装cli） 1.2 vue -V 确认版本为 3.x（目前为3.0.0-beta.16） 使用 vue-cli 构建框架 1234567891011121314151617181920212223242526272829&gt; vue create vueVue CLI v3.0.0-beta.16? Please pick a preset: Manually select features? Check the features needed for your project: (*) Babel (*) TypeScript ( ) Progressive Web App (PWA) Support # 网页App (*) Router (*) Vuex (*) CSS Pre-processors (*) Linter / Formatter (*) Unit Testing ( ) E2E Testing # 端到端调试? Use class-style component syntax? Yes? Use Babel alongside TypeScript for auto-detected polyfills? Yes? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): LESS? Pick a linter / formatter config: TSLint? Pick additional lint features: Lint on save? Pick a unit testing solution: Mocha? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? In dedicated config files # 分离配置文件 以上为我的具体框架选择 npm/yarn serve运行即可 需要修改 webpack 等设置，新建 vue.config.js 可以自定义配置，具体配置见官方 vue-cli 仓库-&gt; docs -&gt; config 注：支持Jsx，内置webpack、babel、ts等，基本无需多余配置，开箱即用，相对2.x自己构建已经非常精简了 1234567891011121314151617181920212223242526272829303132333435363738&#123; "name": "vue", "version": "0.1.0", "private": true, "scripts": &#123; "serve": "vue-cli-service serve", "build": "vue-cli-service build", "lint": "vue-cli-service lint", "test:unit": "vue-cli-service test:unit" &#125;, "dependencies": &#123; "bootstrap-vue": "^2.0.0-rc.11", "vue": "^2.5.16", "vue-class-component": "^6.0.0", "vue-property-decorator": "^6.0.0", "vue-router": "^3.0.1", "vuex": "^3.0.1", "vuex-class": "^0.3.1" &#125;, "devDependencies": &#123; "@types/chai": "^4.1.0", "@types/mocha": "^2.2.46", "@vue/cli-plugin-babel": "^3.0.0-beta.15", "@vue/cli-plugin-typescript": "^3.0.0-beta.15", "@vue/cli-plugin-unit-mocha": "^3.0.0-beta.15", "@vue/cli-service": "^3.0.0-beta.15", "@vue/test-utils": "^1.0.0-beta.16", "chai": "^4.1.2", "less": "^3.0.4", "less-loader": "^4.1.0", "vue-template-compiler": "^2.5.16" &#125;, "browserslist": [ "&gt; 1%", "last 2 versions", "not ie &lt;= 8" ]&#125; VSCode调试断点，安装Debugger插件，这里用的是 Debugger for FireFox，配置： 12345678910111213141516// launch.json&#123; "version": "0.2.0", "configurations": [ &#123; "name": "Launch localhost", "type": "firefox", "request": "launch", "reAttach": true, "url": "http://localhost:8080/#/", "webRoot": "$&#123;workspaceFolder&#125;", "firefoxExecutable": "C:/Program Files/Mozilla Firefox/firefox.exe", "firefoxArgs": ["-start-debugger-server", "-no-remote"] &#125; ]&#125; 服务还是要先命令行运行yarn serve的 参考vue-cli官网：有介绍及教程等（瞎折腾好久才发现） 官方仓库vue-cli VSCode调试运行在Chrome, Firefox与Edge内的JS程序 记一开始不知道有vue-cli 3.0，用的2.9.6，各种包一个个装，ts也要自己配置，搞了一两天，终于能跑了，但是VSCode就是提示找不到模块，想想应该是包装的太乱太杂了。3.0中间不需要按2.x一样装配ts、jsx等等，省的自己装的乱七八糟的，终于能安心看vue和ts了。]]></content>
      <categories>
        <category>Front</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【MSMQ】微软消息队列使用记录]]></title>
    <url>%2Fpost%2Fa978f3d9.html</url>
    <content type="text"><![CDATA[简介MSMQ（Microsoft Message Queue），消息队列是用于消息传输的中间存储容器，主要可以用于 异步处理、应用解耦、流量削峰、日志处理及消息通讯等等 使用记录 Peek 、 Recieve 两者都是获取队列消息的方法，区别的是，Peek 获取后不删除队列内消息，Recieve 则是获取后删除对应消息 异步接收消息 异步接收消息需要先提供异步事件处理方法，然后初始化一个异步接收操作，直到接收到消息，或超时。 12345678// 异步接收消息queue.PeekCompleted += new PeekCompletedEventHandler(method);queue.BeginPeek();// 异步接收并删除队列内对应消息queue.ReceiveCompleted += new ReceiveCompletedEventHandler(method);queue.BeginReceive();queue.BeginReceive(TimeSpan.FromMilliseconds(100)); 简单封装类，如需要更多方法，根据情况自行封装或者选择不封装 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980using System;using System.Messaging;namespace Utils&#123; public class MessageQueueHelper : IDisposable &#123; protected MessageQueueTransactionType transactionType = MessageQueueTransactionType.Automatic; protected MessageQueue queue; // 消息队列 protected TimeSpan timeout; // 接收监听超时时间 public MessageQueueHelper(string queuePath, int timeoutSeconds) &#123; Createqueue(queuePath); queue = new MessageQueue(queuePath); timeout = TimeSpan.FromSeconds(Convert.ToDouble(timeoutSeconds)); //设置当应用程序向消息对列发送消息时默认情况下使用的消息属性值 //queue.DefaultPropertiesToSend.AttachSenderId = false; //queue.DefaultPropertiesToSend.UseAuthentication = false; //queue.DefaultPropertiesToSend.UseEncryption = false; //queue.DefaultPropertiesToSend.AcknowledgeType = AcknowledgeTypes.None; //queue.DefaultPropertiesToSend.UseJournalQueue = false; &#125; /// &lt;summary&gt; /// 消息接收 /// &lt;/summary&gt; public virtual object Receive() &#123; try &#123; using (Message message = queue.Receive(timeout, transactionType)) return message; &#125; catch (MessageQueueException e) &#123; LogHelper.ErrorLog(typeof(MessageQueueHelper), e, "队列接收消息异常！"); if (e.MessageQueueErrorCode == MessageQueueErrorCode.IOTimeout) throw new TimeoutException(); throw e; &#125; &#125; /// &lt;summary&gt; /// 消息发送 /// &lt;/summary&gt; public virtual void Send(object msg) &#123; queue.Send(msg, transactionType); &#125; /// &lt;summary&gt; /// 创建使用指定路径的新消息队列 /// &lt;/summary&gt; /// &lt;param name="queuePath"&gt;队列存储路径&lt;/param&gt; public static void Createqueue(string queuePath) &#123; try &#123; if (!MessageQueue.Exists(queuePath)) &#123; MessageQueue.Create(queuePath, true); &#125; &#125; catch (MessageQueueException e) &#123; throw e; &#125; &#125; #region 实现 IDisposable 接口成员 public void Dispose() &#123; queue.Dispose(); &#125; #endregion &#125;&#125; 进一步实现特定队列 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110using System;using System.Collections.Generic;using System.Messaging;using Newtonsoft.Json;using System.Threading;using Utils; // Helper的命名空间namespace API.App_Start&#123; public class ReceiveProcessQueue : MessageQueueHelper &#123; // 获取配置文件中有关消息队列路径的参数 private static readonly string queuePath = @".\private$\rpmsmq"; private static int queueTimeout = 30; public ReceiveProcessQueue() : base(queuePath, queueTimeout) &#123; // 设置消息的序列化方式 queue.Formatter = new XmlMessageFormatter(new Type[] &#123; typeof(string) &#125;); &#125; /// &lt;summary&gt; /// 接收消息 /// &lt;/summary&gt; public void ReceiveData() &#123; // 指定消息队列事务的类型，Automatic枚举值允许发送发部事务和从外部事务接收 transactionType = MessageQueueTransactionType.Automatic; Message msg = (Message)base.Receive(); Process(msg); &#125; /// &lt;summary&gt; /// 接收消息指定超时时间 /// &lt;/summary&gt; /// &lt;param name="timeout"&gt;超时时间&lt;/param&gt; public void ReceiveData(int timeout) &#123; base.timeout = TimeSpan.FromSeconds(Convert.ToDouble(timeout)); ReceiveData(); &#125; /// &lt;summary&gt; /// 异步消息接收 /// &lt;/summary&gt; /// &lt;param name="method"&gt;异步处理方法&lt;/param&gt; public void ReceiveByAsync() &#123; queue.ReceiveCompleted += new ReceiveCompletedEventHandler(ReceiveCompleted); // 指定初始化异步并行处理数量 #if !DEBUG int MAX_THREAD = 16; #else int MAX_THREAD = 3; #endif for (int i = 0; i &lt; MAX_THREAD; i++) &#123; queue.BeginReceive(); &#125; &#125; /// &lt;summary&gt; /// 异步处理方法 /// &lt;/summary&gt; /// &lt;param name="source"&gt;队列&lt;/param&gt; /// &lt;param name="asyncResult"&gt;异步结果&lt;/param&gt; public void ReceiveCompleted(Object source, ReceiveCompletedEventArgs asyncResult) &#123; MessageQueue queue = (MessageQueue)source; queue.Formatter = new XmlMessageFormatter(new Type[] &#123; typeof(string) &#125;); // 完成指定的异步接收操作 Message msg = queue.EndReceive(asyncResult.AsyncResult); Process(msg); // 消息处理完成后，初始化新的异步接收操作 queue.BeginReceive(); &#125; /// &lt;summary&gt; /// 发送消息 /// &lt;/summary&gt; /// &lt;param name="msg"&gt;消息&lt;/param&gt; public void SendData(string msg) &#123; // 指定消息队列事务的类型，Single枚举值用于单个内部事务的事务类型 base.transactionType = MessageQueueTransactionType.Single; base.Send(msg); &#125; public void Process(Message msg) &#123; string msgStr = null; try &#123; if (ReferenceEquals(msg.Body, null)) &#123; Console.WriteLine("null"); return; &#125; msgStr = (string)msg.Body; Console.WriteLine(msgStr); Thread.Sleep(100); // 睡眠随机时间可以看到多线程异步效果 &#125; catch (Exception ex) &#123; throw ex; &#125; &#125; &#125;&#125; 结束经过单元测试，测试正常，后面就要根据业务来做调整了，考虑如何提升并行处理的效率，且不会爆栈。 解决方案有： 异步 + 多线程（现在的） 轮询动态增减消费者（使用定时任务，定时检查队列消息数量，动态增减消费者） 需要主要对系统开销，以及应对峰值等场景的效果，进行权衡 之前写过 RabbitMQ 的demo，现在发现不实际使用真的是很多问题都不知道。]]></content>
      <categories>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>middleware</tag>
        <tag>Message Queue</tag>
        <tag>DotNet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【SQL】GROUP BY分组统计]]></title>
    <url>%2Fpost%2Fef45c8bd.html</url>
    <content type="text"><![CDATA[问题有一张学生表，包含学生、班级、性别（男、女）等信息，要求查询出全是男生或全是女生的班级 分组统计一般要查询的字段不是表格的主要信息的时候，需要按照需要的字段分组。如在学生表查班级信息。 当需要根据分组后的数据统计筛选时，需要使用 HAVING 来进行 1234SELECT ClassIDFROM StudentsGROUP BY ClassIDHAVING COUNT(DISTINCT Gender) = 1 记好久没写过什么复杂查询了，看到这个问题，一时还没想对，如果使用 GROUP BY ClassID, Gender 进行分组的话，会最终以 班级 * 性别 的分组返回 ClassID Gender COUNT(Gender) class01 男 12 class01 女 20 …… 这样就无法对性别进行筛选了，所以分组时要注意分组统计的条件，是否应该加入分组]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【SQL Server】发布订阅配置失败处理方法]]></title>
    <url>%2Fpost%2Fce23289f.html</url>
    <content type="text"><![CDATA[前言因为业务需求，需要“实时”的同步基础平台的一些信息，公司使用的又是 SQL Server ，简单稳定起见，选择使用 发布订阅 功能来实现数据的同步。 环境OS：Windows Server 2008 R2 DB：SQL Server 2008 R2 参考Sql Server 2008R2 数据库发布与订阅——DBArtist，博客园 配置失败处理 发布服务器，删除本地发布失败： 1sp_removedbreplication 'DBName' -- 强制删除被发布数据库的所有发布 订阅服务器连接根目录 -&gt; 复制 -&gt; 本地订阅 内没有新建的订阅的情况下，删除多余的订阅服务器： 12sp_helpserver -- 查看服务器sp_dropserver '[name]', 'droplogins' -- 删除服务器 SQL Server代理 重启，这个估计改名字的时候就要重启，不然会有报错 主要流程 确认数据库的服务名和服务器的机器名一致 123456789101112131415161718192021222324-- 检查SQL Server 的服务器名称use mastergoselect @@servernameselect serverproperty('servername')-- 删除所有之前配置的publishersselect * from msdb.dbo.MSdistpublishersDELETE FROM msdb.dbo.MSdistpublishersselect * from msdb.dbo.MSdistpublishersexec sp_droplinkedsrvlogin 'old_server_name',nullexec sp_dropserver 'old_server_name', 'droplogins'-- 配置计算机名与服务名一致USE masterGOif serverproperty('servername') &lt;&gt; @@servername begin declare @server sysname set @server = @@servername exec sp_dropserver @server = @server set @server = cast(serverproperty('servername') as sysname) exec sp_addserver @server = @server , @local = 'LOCAL' end 重启SQL Server服务、SQL Server代理服务 然后 sp_helpserver 可以查看到当前的服务器名称，没有配置过应该只有 dbv32 和一个当前机器名一样的服务器， 配置别名 打开发布服务器和订阅服务器的 SQL Server 配置管理器 在 [SQL Native Client 10.0配置(32位)] 和 [SQL Native Client 10.0配置] 中配置别名 别名：[第一步确认的机器名] 端口号：1433 服务器：对应的服务器机器的IP地址 协议：TCP/IP 发布服务器需要配置自己和所有订阅服务器的别名，订阅服务器需要配置自己和发布服务器的别名 发布服务器建立发布 发布服务器连接根目录 -&gt; 复制 -&gt; 本地发布 右键 新建发布，然后根据提示选择性Next 不行了看一下配置一下 安全设置 ，上面选第二个 在SQL Server 代理账户下运行，然后下面选第二个配置 SQL Server 登录名 然后Next到完成，没报错就搞定了 订阅服务器建立订阅 订阅服务器连接根目录 -&gt; 复制 -&gt; 本地订阅 右键 新建订阅，发布服务器选择：查找，添加你的发布服务器，用之前配的别名 需要实时同步的话，分发代理位置选第一个，在发布服务器上运行分发服务，发布服务器主动推送。根据需要也可以选第二个 订阅服务器和数据库，数据库可以点下拉然后拉到最上面自己新建 分发服务器安全连接，配置之前 发布服务器 的 安全设置 然后根据提示选择性Next到完成，没报错就搞定了所有配置 右键发布服务器的发布， 启动复制监视器 ，查看状态，没报错，然后快照完成，在订阅看到数据就可以了 后记一开始配置不知道哪里出问题了，快照不生成，快照代理启动就挂掉，订阅服务器的数据库也没看到数据，发布也不给删，报错发布下面还有订阅 就找了半天删除的方法，后来发布订阅的服务器删干净， SQL Server代理 重启，重新配置了一遍就好了，也是心累╮(╯_╰)╭ 现在想想估计是代理服务没有重启导致的。总之，以后配置的话，记着顺手把这个也重启了吧。]]></content>
      <categories>
        <category>SQL-Server</category>
      </categories>
      <tags>
        <tag>SQL-Server</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[随笔2018-3-14]]></title>
    <url>%2Fpost%2F7d5ab8dd.html</url>
    <content type="text"><![CDATA[过年回来有段时间没记点什么了，工作虽然没之前那么忙，还是没想清楚到底去积累点什么好吧，主要可能也是懒←_← 看了两个星期的 《数据挖掘概念与技术》 和 《机器学习实战》 （ PRML 实在是…太数学了… ，也理解了一下数据仓库、数据立方体、上卷、下钻等等…一些名词，明白了kNN、SMO、SVM等等算法的全称…（kNN、决策树还是看懂了的，就是后面朴素贝叶斯开始就慢慢有点模糊了…什么支持向量机啊就来回看了好几遍，查了不少东西才理解了些 =_= ，哎，觉得实在无法在脑海里跟实际问题映射上关系，也就难以应用了。于是，就没继续看了，虽然看一半放弃了，但是也算大致了解了 数据挖掘 相关的一系列东西吧，不亏！（强行 为了休息下我可怜的脑袋，上星期弄了下 Unity3D 玩，emmm，感觉没有找到适合我节奏的学习资料啊，官方文档太细太慢，各种博客又太粗略，待我闲时再把官方的几个工程改改修修，估计就能自己做个自己想的小游戏玩了(^▽^) 这两天算是没什么闲时了，今天趁刚有空回忆一下，免得回头感觉前面几个星期就白过了一样╮(╯_╰)╭]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【SQL】循环游标遍历]]></title>
    <url>%2Fpost%2Fc638d2ec.html</url>
    <content type="text"><![CDATA[记录用循环（ WHILE ）游标（ CURSOR ）实现，遍历系统视图，取出（ FETCH ）每条数据并计数+1（这里只是用来记下怎么用，查数量肯定还是用 COUNT() 。 12345678910111213141516171819202122232425CREATE PROCEDURE P_CHECK_DB_NUMASBEGIN DECLARE @num INT, @error INT DECLARE @temp VARCHAR(50) SET @num = 1 SET @error = 0 --申明游标为db_cursor DECLARE db_cursor CURSOR FOR (SELECT [name] FROM [master].[sys].[databases]) --打开游标-- OPEN db_cursor --开始循环游标变量-- FETCH NEXT FROM db_cursor INTO @temp WHILE @@FETCH_STATUS = 0 --返回被 FETCH语句执行的最后游标的状态-- BEGIN SET @num = @num + 1 SET @error = @error + @@ERROR --记录每次运行sql后是否正确，0正确 FETCH NEXT FROM db_cursor INTO @temp --转到下一个游标，没有会死循环 END CLOSE db_cursor --关闭游标 DEALLOCATE db_cursor --释放游标 RETURN @num;END 后言自从当初学完以后就好像没再用过了，今天偶然想起来，记录一下用法。]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>SQL Server</tag>
        <tag>T-SQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【Js】使用小记]]></title>
    <url>%2Fpost%2Fae10444e.html</url>
    <content type="text"><![CDATA[记一下Js的一些知识点 ==和===的区别==是值相等比较（会做类型转换后比较），===是严格相等比较（还要比较类型） 对于 string ，number 等基础类型， == 和 === 是有区别的 不同类型间比较，==之比较“转化成同一类型后的值”看“值”是否相等，=== 如果类型不同，其结果就是不等 同类型比较，直接进行“值”比较，两者结果一样 对于 Array ， Object 等高级类型， == 和 === 是没有区别的进行“指针地址”比较 基础类型与高级类型， == 和 === 是有区别的 对于 == ，将高级转化为基础类型，进行“值”比较 因为类型不同， === 结果为 false 我的一篇随笔里有记过一个例子，这里再放一下120 == '' -&gt; true0 === '' -&gt; false 没有块级作用域123456789101112var data = '';function test(data) &#123; if (data != null) &#123; var tips = 'data not null'; console.log(tips); &#125; else &#123; var tips = 'data is null'; console.log(tips); &#125;&#125;test(data); 上面的代码浏览器可以运行的，但是Js语法检查的话会报错吧，tips 变量在 test() 内被定义在两个代码块内，但是js没有块级作用域，函数作为Js内的最小作用域，所以 tips 变量这里重复定义了。 记：Js中没有用 var 声明的变量都是全局变量，而且是顶层对象的属性]]></content>
      <categories>
        <category>Front</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【SQL】SQL-Server递归查询]]></title>
    <url>%2Fpost%2F83629cbf.html</url>
    <content type="text"><![CDATA[需求有一张国内区域表，要查询一个区域及其子区域的区域编码 效果： 表结构：12345678910CREATE TABLE [dbo].[Region]( [REGION_ID] [int] PRIMARY KEY NOT NULL, [REGION_CODE] [varchar](100) NOT NULL, [REGION_NAME] [varchar](100) NOT NULL, [PARENT_ID] [int] NOT NULL, [REGION_LEVEL] [int] NOT NULL, [REGION_ORDER] [int] NOT NULL, [REGION_NAME_EN] [varchar](100) NOT NULL, [REGION_SHORTNAME_EN] [varchar](10) NOT NULL) PARENT_ID为父区域的REGION_ID，这种结构就让我想能不能递归查询，减少连接数据库进行查询请求的次数。 参考使用公用表表达式的递归查询 —— technet，microsoft.aspx)SQL递归查询知多少 —— 圣杰，博客园 实现方法使用多次查询虽然可以完成，但是效率不够高，并且代码冗余，SQL Server使用公用表表达式（Common Table Expression，CTE）可以实现递归查询12345678910111213141516171819CREATE PROCEDURE [dbo].[P_REGION] @RegionCode VARCHAR(50)='' ASBEGINWITH CTE_REGION(REGION_ID, REGION_CODE, REGION_NAME, PARENT_ID, REGION_LEVEL, REGION_ORDER, REGION_NAME_EN, REGION_SHORTNAME_EN) AS( SELECT REGION_ID, REGION_CODE, REGION_NAME, PARENT_ID, REGION_LEVEL, REGION_ORDER, REGION_NAME_EN, REGION_SHORTNAME_EN FROM [dbo].[Region] WHERE REGION_LEVEL &lt; 3 AND REGION_CODE = @RegionCode UNION ALL SELECT a.REGION_ID, a.REGION_CODE, a.REGION_NAME, a.PARENT_ID, a.REGION_LEVEL, a.REGION_ORDER, a.REGION_NAME_EN, a.REGION_SHORTNAME_EN FROM [dbo].[Region] a INNER JOIN CTE_REGION b ON a.PARENT_ID = b.REGION_ID)SELECT REGION_CODE FROM CTE_REGIONEND]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>SQL Server</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【Linq】模糊条件查询]]></title>
    <url>%2Fpost%2F10424fa.html</url>
    <content type="text"><![CDATA[模糊查询SQL里字段的模糊匹配可以使用like关键字，使用方式如：like &quot;%search&quot;、like &quot;search%&quot;、like &quot;%search%&quot;，分别对应后缀、前缀、包含三种模糊匹配方式 Linq对应的模糊查询 前缀匹配搜索 123var l = from p in Person where p.name.StartsWith("jack") select p; 后缀匹配搜索 123var l = from p in Person where p.name.EndsWith("chen") select p; 包含匹配搜索 123var l = from p in Person where p.name.Contains("ac") select p; 条件模糊查询 有时候界面上面，我们在表格前面会有个输入框，提供一些字段的搜索，在不输入的时候，这个搜索条件就不作为限制条件 而这时传到后端的条件是null，前面三种搜索直接使用的话，会出现结果的错误，null成了限制条件 所以需要在where里加上对应字段为null的情况，使搜索条件为空时，模糊匹配失效12345string search = null;var l = from p in Person where p.name.Contains(search) || search == null select p; 条件中in与not in参考：LINQ - 在Where條件式中使用in與not in —— ADOU-V，博客园 in的SQL实现：12Select ProductID, ProductName, CategoryID From dbo.Products Where CategoryID in (1, 2) in的Linq实现：123var l = from p in dbctx.Products where (new int?[] &#123;1, 2&#125;).Contains(p.CategoryID) select p; not in的SQL实现：12Select ProductID, ProductName, CategoryID From dbo.Products Where CategoryID not in (1, 2) not in的Linq实现：123var l = from p in dbctx.Products where !(new int?[] &#123;1, 2&#125;).Contains(p.CategoryID) select p;]]></content>
      <categories>
        <category>Linq</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Linq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【Shell/Bat】脚本记录]]></title>
    <url>%2Fpost%2Fe372f2fe.html</url>
    <content type="text"><![CDATA[注释shell里可以使用#号，bat里可以使用rem、::，还有很多其他注释的方法 变量 shell 变量定义与重定义 12345678910# 定义变量$ var="变量"$ echo $var变量$ var="重定义变量"$ echo $var重定义变量# 输入变量read -p "是否更新Blog(y/n) :" updateOp bat 变量定义与重定义 12345678910REM 定义变量set var=变量echo %var%变量set var=重定义变量echo %var%重定义变量REM 输入变量set /p updateOp = "是否更新（y/n）：" if…else… shell的条件语句 12345678# 输入变量read -p "输入var:" var# 判断变量是否等于 y （x为了避免比变量为空异常）if [ "$var"x = "y"x ]; then echo "if内"else echo "else内"fi bat的条件语句 123456REM /p 从输入赋值变量set /p updateOp="是否更新（y/n）："REM 判断输入（Y/N），/i 忽略大小写if /i "%updateOp%"=="y" (git pull origin master) 端口占用查看 shell的语句 123# lsof -i:端口号 用于查看某一端口的占用情况，比如查看8000端口使用情况lsof -i:8000netstat -tunlp | grep 8000 bat的语句 12345678REM 查询443相关端口占用（查询结果里有 443 的&gt;netstat -ano | findstr 443 TCP 0.0.0.0:443 0.0.0.0:0 LISTENING 1480 ... ...REM 查询1480进程&gt;tasklist | findstr 1480httpd.exe 1480 Services 0 4,652 K 记录 注意空格的使用，脚本里空格往往是分隔命令和参数的，不像Java什么的里面可以用很多空格来分隔变量和运算符，让代码看起来更清晰。 脚本如果写的不对，经常没有异常代码什么的，所以要仔细看输出，自己也多写点echo，好辨别执行情况 后言 这里只记录了一些我自己想记的东西哦 记得当初上Linux的时候，我还自己安装Ubuntu练习使用了一阵子的命令行，这门课成绩也还行，只是考完试以后就没怎么碰过了，后来就自己折腾centos的时候用过一点，然后就是开始用github以后了，最近弄点小脚本来给自己省点事，顺便记录一些]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【EntityFramework】分页查询无主键视图数据重复异常]]></title>
    <url>%2Fpost%2F78ebec87.html</url>
    <content type="text"><![CDATA[问题在做统计的查询视图之后，发现EF查询的结果第一条覆盖了第二条，两条数据只有一个时间字段不一样 原因分析EF默认有缓存，视图没有建立主键，EF的缓存机制认为这两条除了时间不同的数据一致，就没有再从数据库取，然后出现SQL Server Profiler里面的SQL正常，但是拿到的数据死活都不对。 解决方法对视图使用.AsNoTracking()，取消EF对这个视图的缓存（然后可以使用Entity Framework Plus调用MemoryCache或Redis来做缓存）12var l = from s in statView.AsNoTracking() select s;]]></content>
      <categories>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>DotNet</tag>
        <tag>Entity Framework</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【SQL】一次查询统计多张表]]></title>
    <url>%2Fpost%2F41b37696.html</url>
    <content type="text"><![CDATA[需求 一次查询统计所有用户每天的事件A（表A）、事件B（表B）和事件C（表C）的数量以及三种事件的总量环境：SQL Server 实现思路： 三种子查询后联表 问题： 没有一个的日期表来作为联表的基准表，以A表为基准表会缺失A表内没有的日期，如何补全 解决方法： 没有的就用其他表的补上，需要知道ISNULL()方法或着使用条件判断语句case when 条件1 then 结果1 when 条件2 then 结果2 else 结果N end来判断A表是否没有对应列数据，然后补全B或C表对应列 实现：12345678910111213141516171819202122232425262728293031323334353637SELECT temp.[UserID], CONVERT(DATE, temp.[DateTime]) AS [DateTime], temp.[AEventNumber], temp.[BEventNumber], temp.[CEventNumber], temp.[TotalNumber]FROM ( SELECT ISNULL(abe.[UserID], ce.[UserID]) AS [UserID], ISNULL(abe.[DateTime], ce.[DateTime]) AS [DateTime], abe.[AEventNumber], abe.[BEventNumber], ce.[CEventNumber], ISNULL(abe.[AEventNumber], 0) + ISNULL(abe.[BEventNumber], 0) + ISNULL(ce.[CEventNumber], 0) as TotalNumber FROM (SELECT ISNULL(ae.[UserID], re.[UserID]) AS [UserID], ISNULL(ae.[DateTime], re.[DateTime]) AS [DateTime], ISNULL([AEventNumber], 0) AS [AEventNumber], ISNULL([BEventNumber], 0) AS [BEventNumber], ISNULL([AEventNumber], 0) + ISNULL([BEventNumber], 0) as TotalNumber FROM (SELECT a.[UserID], a.[DateTime], a.[Number] AS [AEventNumber] FROM AEvent AS a) AS ae FULL JOIN (SELECT b.[UserID], b.[DateTime], b.[Number] AS [BEventNumber] FROM BEvent AS b) AS re ON ae.[UserID] = re.[UserID] and ae.[DateTime] = re.[DateTime]) AS abe FULL JOIN (SELECT c.[UserID], c.[DateTime], c.[Number] AS [CEventNumber] FROM CEvent AS c) AS te ON abe.[UserID] = ce.[UserID] and abe.[DateTime] = ce.[DateTime] ) AS temp 当A表没有B内的用户编号或者统计时间时，使用B的代替，两张表先联接查询然后在和第三张表联接，否则A没有数据时，B的信息不能与C比较，导致B、C没有联接到一条内 小记 ISNULL()可以判断字段是否为空，并使用后面的值补全 按天统计可以将转化为天的时间字段用于GROUP BY，可以使用CONVERT(date, [dt])转换，每天可以用date类型；SQL Server也可以使用GROUP BY year([dt]), month([dt]), day([dt])作为分组条件，实现按每天分组，可推出按年、按月分组；其他需求分组可以考虑使用字符串截取作为分组条件]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[随笔2018-1-10]]></title>
    <url>%2Fpost%2Fd03eb44f.html</url>
    <content type="text"><![CDATA[最近两天接触了下Entity Framework Plus的缓存和Future（就是懒执行批量SQL的感觉）、SQL多表统计汇总、SQL Server查系统存储、用Axure设计网页等等，复习了创建视图、存储过程什么的，RESTClient发Post请求的时候记着加Header。 东西有点多，后面事情也多（年终么(╯‵□′)╯︵┻━┻），抽空记录一下重要的吧。 有点累，熬过去应该就会好了吧。嗯。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[随笔2017-12-26]]></title>
    <url>%2Fpost%2F22331717.html</url>
    <content type="text"><![CDATA[工作了没有了期末，但是多了个年终。 12月末。前些天忙得不行，就忽然来了一堆乱七八糟的事情，不过好在都还算顺利解决了。这两天比较清闲了，可以稍微休息休息，要好好思考一下，毕竟这样的时间现在已经很难得了。 这两天工作在把之前的代码重构，虽说重构，也只是把结构整理了一遍，毕竟各种原因也是想弄也不能弄。不过，能同意我不少观点已经感到很欣慰了，与人相处，需要耐心，事情慢慢来就好了。 2017的小结吧 毕业这就算半年了，这段时间要说学到点什么，好像也没什么特别的。不过很多以前未曾想过的开发的相关问题，都仔细的去思考参与了，也算是收获吧。虽然没能接触到分布式、Hadoop什么的，但是自己学习了解的很多知识，也越发觉得现在的大部分技术使用起来其实并不太难，都有很多前人铺路了，难点在与像大数据的很多算法、数据结构等等，越了解技术越觉得这些理论知识显得重要了。 时间很快，但是想要没站稳就跳远，往往会摔得很惨，一步一步继续前进吧，我想目标也不会太过遥远的]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【Ninject】WebApi项目使用Ninject]]></title>
    <url>%2Fpost%2F1201e0f4.html</url>
    <content type="text"><![CDATA[WebApi项目的依赖注入需要使用System.Web.Http.Dependencies里的IDependencyResolver来实现，和Mvc的IDependencyResolver是不一样的，所以需要实现的Resolver不一样。虽然了解了大概怎么写，但是始终没能让自己重写的Resolver启动，并且看别人写好的还解决了其他的一些注入问题。于是，决定还是用Ninject下面fork的remogloor/Ninject.Web.WebApi，免得浪费时间折腾轮子了。 Mvc的配置 环境WebApi2、.Net Framework 4.5、VS2015 使用方法 添加引用，使用NuGet安装以下两个包 Ninject Ninject.Web.WebApi 查看引用会发现附赠了 Ninject.Web.Common、Ninject.Web.Common.WebHost、Ninject.Web.WebApi.WebHost 三个包。 然后修改在App_Start下NinjectWebCommon的RegisterServices()，在里面后面加上自己的注入bind，如：12345private static void RegisterServices(IKernel kernel)&#123; kernel.Load(Assembly.GetExecutingAssembly()); kernel.Bind&lt;IUserRepository&gt;().To&lt;UserRepository&gt;();&#125; 以上。使用起来很简单。就是封了一层，有些东西需要自己看源码理解了。]]></content>
      <categories>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>DotNet</tag>
        <tag>Ninject</tag>
        <tag>WebApi</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【log4net】代码配置记录]]></title>
    <url>%2Fpost%2F46894695.html</url>
    <content type="text"><![CDATA[由于不想重复配置数据库连接，希望可以通过代码动态设置log4net的数据库记录日志的连接，于是检索了相关的资料，踩了一些手贱的坑╮(╯_╰)╭ 配置代码 log4net配置类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146using log4net;using log4net.Appender;using log4net.Config;using log4net.Core;using log4net.Layout;using log4net.Repository.Hierarchy;using System.Configuration;using System.Reflection;using System.Text;namespace Utils.LogUtils&#123; public class LogConfig &#123; private static string LOG_PATTERN = "[%date] %level [%thread][%c&#123;1&#125;:%line] - %m%n"; private static string DATE_PATTERN = "yyyy-MM-dd'.log'"; private static string LOG_FILE_PATH = "Log/"; private static string connectionType = "System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; private static string commandText = @"INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message],[Exception]) VALUES (@log_date, @thread, @log_level, @logger, @message, @exception)"; /// &lt;summary&gt; /// 本地日志设置 /// &lt;/summary&gt; public static void LocalConfig() &#123; Hierarchy hierarchy = (Hierarchy)LogManager.GetRepository(); PatternLayout patternLayout = new PatternLayout(); patternLayout.ConversionPattern = LOG_PATTERN; patternLayout.ActivateOptions(); // 控制台输出的日志 TraceAppender tracer = new TraceAppender(); tracer.Layout = patternLayout; tracer.ActivateOptions(); hierarchy.Root.AddAppender(tracer); // 滚动文件日志 RollingFileAppender roller = new RollingFileAppender(); roller.Layout = patternLayout; roller.AppendToFile = true; roller.RollingStyle = RollingFileAppender.RollingMode.Date; roller.MaxSizeRollBackups = 4; roller.MaximumFileSize = "1MB"; roller.StaticLogFileName = false; roller.File = LOG_FILE_PATH; roller.DatePattern = DATE_PATTERN; roller.Encoding = Encoding.UTF8; roller.ActivateOptions(); hierarchy.Root.AddAppender(roller); hierarchy.Root.Level = log4net.Core.Level.All; hierarchy.Configured = true; BasicConfigurator.Configure(roller); LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType).Info("本地日志启动"); &#125; /// &lt;summary&gt; /// 数据库日志设置 /// &lt;/summary&gt; public static void DataBaseConfig() &#123; // 从web.config的appSetting节点获取配置的数据库连接 string connectionString = ConfigurationManager.AppSettings["DBConnection"].ToString(); Hierarchy hierarchy = (Hierarchy)LogManager.GetRepository(); PatternLayout patternLayout = new PatternLayout(); patternLayout.ConversionPattern = LOG_PATTERN; patternLayout.ActivateOptions(); TraceAppender tracer = new TraceAppender(); tracer.Layout = patternLayout; tracer.ActivateOptions(); hierarchy.Root.AddAppender(tracer); // ado.net数据库日志 AdoNetAppender appender = new AdoNetAppender(); appender.Name = "adoNetAppender"; appender.ConnectionType = connectionType; appender.ConnectionString = connectionString; appender.CommandText = commandText; appender.CommandType = System.Data.CommandType.Text; appender.BufferSize = 1; AdoNetAppenderParameter parameter = new AdoNetAppenderParameter(); parameter.DbType = System.Data.DbType.Date; parameter.ParameterName = "@log_date"; parameter.Size = 255; parameter.Layout = new RawTimeStampLayout(); appender.AddParameter(parameter); parameter = new AdoNetAppenderParameter(); parameter.DbType = System.Data.DbType.String; parameter.ParameterName = "@thread"; parameter.Size = 50; patternLayout = new PatternLayout("%thread"); parameter.Layout = new Layout2RawLayoutAdapter(patternLayout); appender.AddParameter(parameter); parameter = new AdoNetAppenderParameter(); parameter.DbType = System.Data.DbType.String; parameter.Size = 50; parameter.ParameterName = "@log_level"; patternLayout = new PatternLayout("%level"); parameter.Layout = new Layout2RawLayoutAdapter(patternLayout); appender.AddParameter(parameter); parameter = new AdoNetAppenderParameter(); parameter.DbType = System.Data.DbType.String; parameter.ParameterName = "@logger"; parameter.Size = 255; patternLayout = new PatternLayout("%logger"); parameter.Layout = new Layout2RawLayoutAdapter(patternLayout); appender.AddParameter(parameter); parameter = new AdoNetAppenderParameter(); parameter.DbType = System.Data.DbType.String; parameter.ParameterName = "@message"; parameter.Size = 4000; patternLayout = new PatternLayout("%message"); parameter.Layout = new Layout2RawLayoutAdapter(patternLayout); appender.AddParameter(parameter); parameter = new AdoNetAppenderParameter(); parameter.DbType = System.Data.DbType.String; parameter.ParameterName = "@exception"; parameter.Size = 2000; parameter.Layout = new Layout2RawLayoutAdapter(new ExceptionLayout()); appender.AddParameter(parameter); appender.ActivateOptions(); hierarchy.Root.AddAppender(appender); hierarchy.Root.Level = Level.All; hierarchy.Configured = true; BasicConfigurator.Configure(appender); LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType).Info("数据库日志启动"); &#125; &#125;&#125; 日志工具类 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647using System;using log4net;namespace Utils.LogUtils&#123; /// &lt;summary&gt; /// 日志工具 /// &lt;/summary&gt; public class LogHelper &#123; // 类型使用typeof(classname)或者MethodBase.GetCurrentMethod().DeclaringType之类的 /// &lt;summary&gt; /// 输出异常日志 /// &lt;/summary&gt; /// &lt;param name="type"&gt;类型&lt;/param&gt; /// &lt;param name="message"&gt;信息&lt;/param&gt; /// &lt;param name="ex"&gt;异常&lt;/param&gt; public static void ErrorLog(Type type, string message, Exception ex) &#123; ILog log = LogManager.GetLogger(type); log.Error(message, ex); &#125; /// &lt;summary&gt; /// 输出调试日志 /// &lt;/summary&gt; /// &lt;param name="type"&gt;类型&lt;/param&gt; /// &lt;param name="message"&gt;信息&lt;/param&gt; public static void DebugLog(Type type, string message) &#123; ILog log = LogManager.GetLogger(type); log.Debug(message); &#125; /// &lt;summary&gt; /// 输出信息日志 /// &lt;/summary&gt; /// &lt;param name="type"&gt;类型&lt;/param&gt; /// &lt;param name="message"&gt;信息&lt;/param&gt; public static void InfoLog(Type type, string message) &#123; ILog log = LogManager.GetLogger(type); log.Info(message); &#125; &#125;&#125; 小记 配置的时候要严格遵守顺序，hierarchy要在最前面声明，不然怎么配置都无效 可以通过log4net的调试日志来找问题 在Web.config添加如下配置，来启动log4net的调试日志 12345678910111213&lt;appSettings&gt; &lt;add key="log4net.Internal.Debug" value="true"/&gt; &lt;/appSettings&gt;&lt;system.diagnostics&gt; &lt;trace autoflush="true"&gt; &lt;listeners&gt; &lt;add name="textWriterTraceListener" type="System.Diagnostics.TextWriterTraceListener" initializeData="D:\log4net.txt" /&gt; &lt;/listeners&gt; &lt;/trace&gt; &lt;/system.diagnostics&gt;]]></content>
      <categories>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>DotNet</tag>
        <tag>Log</tag>
        <tag>Config</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【SQL】SQL Server里的锁]]></title>
    <url>%2Fpost%2Fd1379167.html</url>
    <content type="text"><![CDATA[参考SQL SERVER的锁机制sql server锁知识及锁应用 锁类型 锁类型 说明 共享 (S) 用于不更改或不更新数据的读取操作，如 SELECT 语句。 更新 (U) 用于可更新的资源中。 防止当多个会话在读取、锁定以及随后可能进行的资源更新时发生常见形式的死锁。 独占(也可称排他)(X) 用于数据修改操作，例如 INSERT、UPDATE 或 DELETE。 确保不会同时对同一资源进行多重更新。 意向 用于建立锁的层次结构。 意向锁包含三种类型：意向共享 (IS)、意向排他 (IX) 和意向排他共享 (SIX)。 架构 在执行依赖于表架构的操作时使用。 架构锁包含两种类型：架构修改 (Sch-M) 和架构稳定性 (Sch-S)。 大容量更新 (BU) 在向表进行大容量数据复制且指定了 TABLOCK 提示时使用。 键范围 当使用可序列化事务隔离级别时保护查询读取的行的范围。 确保再次运行查询时其他事务无法插入符合可序列化事务的查询的行。 锁查询 查询目前锁的表 12select request_session_id spid, OBJECT_NAME(resource_associated_entity_id) tablename, request_status, request_type, request_mode from sys.dm_tran_locks where resource_type='OBJECT' 查询目前死锁的进程 1234select spid, blocked, loginame, last_batch, status, cmd, hostname, program_name from sys.sysprocesses where spid in ( select blocked from sys.sysprocesses where blocked &lt;&gt; 0 ) or (blocked &lt;&gt;0) 查询锁信息 1234567891011121314select req_spid ,case req_status when 1 then '已授予' when 2 then '正在转换' when 3 then '正在等待' end as req_status ,case rsc_type when 1 then 'NULL 资源（未使用）' when 2 then '数据库' when 3 then '文件' when 4 then '索引' when 5 then '表' when 6 then '页' when 7 then '键' when 8 then '扩展盘区' when 9 then 'RID（行 ID)' when 10 then '应用程序' else '' end rsc_type ,coalesce(OBJECT_NAME(rsc_objid),db_name(rsc_dbid)) as [object] ,case req_mode when 1 then 'NULL' when 1 then 'Sch-S' when 2 then 'Sch-M' when 3 then 'S' when 4 then 'U' when 5 then 'X' when 6 then 'IS' when 7 then 'IU' when 8 then 'IX' when 9 then 'SIU' when 10 then 'SIX' when 11 then 'UIX' when 12 then 'BU' when 13 then 'RangeS_S' when 14 then 'RangeS_U' when 15 then 'RangeI_N' when 16 then 'RangeI_S' when 17 then 'RangeI_U' when 18 then 'RangeI_X' when 19 then 'RangeX_S' when 20 then 'RangeX_U' when 21 then 'RangeX_X' else '' end req_mode ,rsc_indid as index_id,rsc_text,req_refcnt ,case req_ownertype when 1 then '事务' when 2 then '游标' when 3 then '会话' when 4 then 'ExSession' else'' end req_ownertype from sys.syslockinfo WHERE rsc_type&lt;&gt;2 ;]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>SQL Server</tag>
        <tag>lock</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[随笔2017-12-12]]></title>
    <url>%2Fpost%2Fe7380cd.html</url>
    <content type="text"><![CDATA[最近项目正式测试，做的工具使用中遇到了问题，静态变量到底怎么用。 在希望变量可以多次重复使用的时候，会想用静态变量来降低内存消耗，但是这时候也会引入多进程并发使用时的问题。如果使用了静态变量，并且这个变量在每一个进程都应该不一样的话，这样的变量也不是静态的，会出现变量内容覆盖的问题。 在Web多会话的情况下，静态变量是使用的同一内存地址，所以，在考虑在单线程多个类中重用变量时，还是用传参之类的地址引用吧。 如果是完全静态不会变（静态字符串什么的），或者所有进程共享的变量（统计访问量什么的），可以使用静态变量来处理，降低内存消耗。 以前很少经历并发的情况，对相关的思维还是不清晰，以后需要多加留意。以前明明都学过，但是都没注意过。(╯‵□′)╯︵┻━┻]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>static</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[随笔2017-12-7]]></title>
    <url>%2Fpost%2F4e012a29.html</url>
    <content type="text"><![CDATA[javac “编码GBK的不可映射字符”使用javac -encoding UTF-8 XXX.java，或把文件编码改为ANSI 记录LeetCode的笔记以后就直接写在对应的代码文件夹下面README.md里，毕竟有些题简单还写post太麻烦了，找起来也不方便 话说我这么写随笔好像也没嫌弃麻烦呢= =||，嘛，还是看情况吧，大不了回头再迁移过来嘛]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>Java</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用位运算操作]]></title>
    <url>%2Fpost%2F4082dee2.html</url>
    <content type="text"><![CDATA[在进行一些计算时，可以使用位运算代替，从而提升代码执行速度。 以下为常用提升效率的操作 求奇偶数：奇数(Odd)：11 &amp; 1 = 1偶数(Even)：24 &amp; 1 = 0 乘2的幂1 * 2: 1 &lt;&lt; 1 = 21 * 4: 1 &lt;&lt; 2 = 4 除2的幂8 / 2: 8 &gt;&gt; 1 = 48 / 4: 8 &gt;&gt; 2 = 2 注：上面算式里的*号，在Markdown里用来做 斜体 、 加粗 什么的，直接用记着转义（ * ），还有其他特殊符号什么的以后写的时候要注意一下。]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Bitwise</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[随笔2017-12-1]]></title>
    <url>%2Fpost%2Fa7628f1c.html</url>
    <content type="text"><![CDATA[把博客里的代码块高亮整理了一下，没高亮看着真是不好看。(ｰ̀дｰ́) 改完了感觉好多了，嗯( • ̀ω•́ )✧。 最近还是很迷茫(=_=)，不知道有时间的时候，该拿什么充实自己的技术栈，web开发相关的东西，在公司这环境实在不好再往更复杂的方向发展，即使自己去学了Redis、RabbitMQ也无处可用。(╯︵╰) 现在机器学习很火，但是要学习的东西太多了，不能盲目的去追，有在看数据挖掘的东西，先学着，至少概念和一些技术词汇了解了，再看情况是否一步步的加深了解。(￣.￣) 卖卖萌调整一下心情(￣ω￣) 还要准备科目一，事情还是很多的(´･_･`)路还很长，时间很快，接着走吧]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【Entity Framework】自定义读取配置数据库连接]]></title>
    <url>%2Fpost%2F2508d3d8.html</url>
    <content type="text"><![CDATA[问题打包的人反馈EF DBFirst的数据库连接配置里面的&amp;quot(“&quot;”)，处理不好，沟通起来又不在一个地方，很麻烦，连接配置也的确不太好看，于是搜了下，看到了可以自定义。 版本Entity Framework v6.1.3 解决方法 写个获取连接的类 12345678910111213141516171819using System.Configuration;namespace Utils&#123; public class EFConfig &#123; public static string DataBaseConnectionString() &#123; string DataBaseConnection = ConfigurationManager.AppSettings["Connection"].ToString(); return ConnectionString(DataBaseConnection); &#125; public static string ConnectionString(string DataBaseConnection) &#123; return "metadata=res://*/EFData.csdl|res://*/EFData.ssdl|res://*/EFData.msl;provider=System.Data.SqlClient;provider connection string =\"" + DataBaseConnection + "persist security info=True;multipleactiveresultsets=True;application name=EntityFramework\""; &#125; &#125;&#125; 重写一下edmx-&gt;*.Context.tt-&gt;*.Context.cs的构造函数，可以直接修改*.Context.tt文件内的模板，避免下次更新数据库时，代码需要重新修改，搜索base即可，修改后面的&quot;name=xxx&quot;为你获取自定义连接的方法。 1234public EFDbContext() : base(Utils.EFConfig.DataBaseConnectionString())&#123;&#125; 在Web.config的&lt;appSettings&gt;节点配置，删除不使用了的&lt;connectionStrings&gt;节点 123&lt;appSettings&gt; &lt;add key="Connection" value="data source=127.0.0.1;initial catalog=DBName;user id=User;password=Pwd;" /&gt;&lt;/appSettings&gt; 小结其实这主要是构造函数本来的方法就支持直接配置连接字符串]]></content>
      <categories>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>DotNet</tag>
        <tag>Entity Framework</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【Vue】自定义radio组]]></title>
    <url>%2Fpost%2F60a8fd90.html</url>
    <content type="text"><![CDATA[需求做出多组radio组，来作为选择条件的UI组件，比select更方便好看。 问题 使用了bootstrap和vue，两者存在冲突，将bootstrap的js去掉。除了要实现Vue的radio组件外，因为bootstrap的js删除了，所以radio选中的效果没有了，需要自己用Vue来实现绑定点击效果。（不换掉bootstrap的js的话Vue的radio组件事件绑定就会和冲突，进而没反应） 自定义组件的v-model，没能实现出想要的效果。待实验。 解决方法1. bootstrap和vue冲突本来想换成bootstrap-vue的js来用，发现radio的效果不一样了，最后还是要自己写选中效果，索性就把bootstrap的js去掉了，只用个css。 2. Vue的radio组件相关实现demo的js12345678910111213141516171819202122232425262728293031323334353637383940414243// radio组件var temp = '&lt;label class="btn btn-default" :class="&#123;active:checked&#125;" :for="id"&gt;&#123;&#123; label &#125;&#125;' + '&lt;input :name="name" :id="id" type="radio" :value="value" :checked.sync="checked" v-on:click="update" ref="input"&gt;&lt;/label&gt;';Vue.component('radio-tag', &#123; template: temp, props: &#123; id: String, name: String, label: String, value: String, checked: Boolean // 用来绑定初始值 &#125;, methods: &#123; update() &#123; console.log('update'); // ref获取dom if (this.$refs['input'].checked) &#123; this.$emit('update', this.value); &#125; &#125; &#125;&#125;);var app = new Vue(&#123; el: '#condition', data: &#123; schools: [&#123; 'id': 'a', 'name': 'a校' &#125;, &#123; 'id': 'b', 'name': 'b校' &#125;], grades: [&#123; 'id': 'a1', 'name': '初一' &#125;, &#123; 'id': 'a2', 'name': '初二' &#125;, &#123; 'id': 'a3', 'name': '初三' &#125;], school: 'a', grade: 'a1' &#125;, methods: &#123; updateGrades(value) &#123; // 回调函数 this.school = value &#125;, updateClazzes(value) &#123; this.grade = value &#125; &#125;&#125;); demo页面12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;link rel="stylesheet" href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous"&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="container"&gt; &lt;div id="condition" class="row clearfix "&gt; &lt;div class="col-md-12 column"&gt; &lt;form role="form" class="form-horizontal"&gt; &lt;div class="form-group form-inline"&gt; &lt;label for="School" class="col-md-4 control-label"&gt;学校&lt;/label&gt; &lt;div class="btn-group" data-toggle="buttons"&gt; &lt;radio-tag v-for="item in schools" :id="item.id" :name="item.id" :label="item.name" :value="item.id" :checked="school === item.id" v-on:update="updateGrades"&gt;&lt;/radio-tag&gt; &lt;/div&gt; &lt;span&gt;&#123;&#123;school&#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;div class="form-group form-inline"&gt; &lt;label for="Grade" class="col-md-4 control-label"&gt;年级&lt;/label&gt; &lt;div class="btn-group" data-toggle="buttons"&gt; &lt;radio-tag v-for="item in grades" :id="item.id" :name="item.id" :label="item.name" :value="item.id" :checked="grade === item.id" v-on:update="updateClazzes"&gt;&lt;/radio-tag&gt; &lt;/div&gt; &lt;span&gt;&#123;&#123;grade&#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script type="text/javascript" src="https://cdn.jsdelivr.net/npm/vue"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="index.js"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 小结 vue的语法缩写 v-bind缩写:，例：v-bind:id=&quot;id&quot;-&gt;:id=&quot;id&quot; v-on缩写@，例：v-on:click=&quot;update&quot;-&gt;@click=&quot;update&quot; .net Razor页面中@冲突，可以使用@@，或者就不要缩写 vue中class绑定 :class=&quot;{active:isActive}&quot;，这个是官方例子 :class=&quot;{active:(model==0?true:false)}&quot;，表达式使用 父子组件传值 props属性用来父往子传值 $emit()方法用来子往父传值]]></content>
      <categories>
        <category>Front</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Bootstrap</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【C#】数组操作]]></title>
    <url>%2Fpost%2F43a178cc.html</url>
    <content type="text"><![CDATA[前言数组的合并拆分，基本就是利用数组的复制方法来实现 C#里面使用lambda表达式很方便，数组的各种操作使用lambda就很简洁，但是效率也是自然不如其他的函数了 数组合并(复制)12345678910111213141516171819202122232425262728293031323334int[] a = new int[] &#123; 1, 2, 3, 4, 5 &#125;;int[] b = new int[] &#123; 6, 7, 8, 9 &#125;;int[] c = new int[](a.Length + b.Length);// lambda表达式 Concat 方法int[] c = a.Concat(b).ToArray();/* Array.Copy 支持所有类型数组，支持装拆箱public static void Copy( Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length)*/Array.Copy(a, 0, c, 0, a.Length);Array.Copy(b, 0, c, a.Length, b);// Array.ConstrainedCopy 和 Array.Copy 差不多，更严格，不支持装拆箱/* Buffer.BlockCopy 只支持基元类型sbyte / byte / short / ushort / int / uint / long / ulong / char / float / double / boolpublic static void BlockCopy ( Array src, int srcOffset, Array dst, int dstOffset, int count)*/Buffer.BlockCopy(a, 0, c, 0, a.Length);Buffer.BlockCopy(b, 0, c, a.Length, b); 数据量小的情况下，没有太大差别，大量数据时速度比较如下1Buffer.BlockCopy &gt; Array.ConstrainedCopy &gt; Array.Copy &gt; Concat 数组拆分除了lambda表达式基本，就是使用复制方法，复制子数组到新数组了，如：123int[] a = new int[] &#123; 1, 2, 3, 4, 5 &#125;;int[] b = new int[](3);Array.Copy(a, 0, b, 0, 3); 字符串数组 以指定间隔符 拼接成字符串12string[] a = new string[] &#123;"1", "2"&#125;;string s = string.Join(", ", a); // 1, 2 字符串 以指定间隔符 分割成字符串数组123456789// 单字符分割string s = "a|b|c|";string[] a = s.Split('|'); // &#123;"a", "b", "c", ""&#125;// 多字符分割string[] a = s.Split(new char[2] &#123;'&amp;','|'&#125;);// 字符串分割string[] a = Regex.Split(s,"ab",RegexOptions.IgnoreCase);]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【LeetCode】4. Median of Two Sorted Arrays]]></title>
    <url>%2Fpost%2F2a84b609.html</url>
    <content type="text"><![CDATA[两数组的中值题目地址：Go to LeetCode 题意求两个有序数组中间位置的数，两个数组长度和为偶数个时中间数求平均。(哇，这题理解起来还是挺简单的，就是要做到O(m+n)有点麻烦了。) 解题思路 归并排序（O(m+n)）两个有序数组合并排序，这是归并排序算法的一部分。 普 通 思 路。然而我这个想法就一闪而过就没了。Orz，还去用插排了，做了半天看起来判断太多太丑了，后面直接删了。然后看了下题解，自己写了遍。（扶额 二分查找（O(m,n)）二分查找一个数组还算简单，这两个数组就有点晕了。思路的话 LeetCode 上有的，虽然是英文的，但是我没准备汉化一遍。（反正我这也没人看，略略略~ 记还是要多做做题，不然都忘光了。脑子已经锈实了。]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Java</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【HDU-2215】I Love This Game]]></title>
    <url>%2Fpost%2Fb2d1e532.html</url>
    <content type="text"><![CDATA[I Love This Game地址：I Love This Game 题意NBA技巧大赛，给出一组球员及完成时间，求排名，相同时间排名相同，先按时间优先排序然后球员姓名字典序 解题思路比较优先级mm &gt; ss &gt; name，然后对排序后数组逐个判断时间是否有相同的，相同则打印排名，否则排名等于下标+1 记今天公司网有点烂，LeetCode加载太慢了，就翻了下杭电。看看当初懒懒的就做了那么十几题，还有一题WA的（就这题。），于是重新弄了下环境（VSCode + TDM-GCC），折腾了好久，然后终于可以弄代码了，发现之前代码里少了个+1。=_=，可能是那时候改好了忘提交了吧。 win下普通g++环境用TDM-GCC就好了，体积比Cygwin、Mingw要小得多。VSCode配置文件见，Algorithm仓库的.vscode文件夹。 因为不想把这题混到LeetCode的里面，所以新建了分类、仓库]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【LeetCode】3. Longest Substring Without Repeating Characters]]></title>
    <url>%2Fpost%2Fed2c3dd1.html</url>
    <content type="text"><![CDATA[字符串内无重复字母的最长子串题目地址：Go to LeetCode 解题思路：字符串都是 “字符” 串，那就逐个 字符 来考虑比较呗。 定义： 目标串：字符串内无重复字母的最长子串 当前最大目标串长度：l 最大目标串长度:lmax 解题步骤： 设定i为目标串第一个字符下标，逐个字符遍历 比较当前字符在前面是否存在，是则i设置为已存在字符的下标+1（即要包含后面的字符，且不重复，只能舍弃前面的了，后面比较就从这里开始），否则当前最大目标串长度l + 1 直到比较完当前字符前所有字符，若l &gt; lmax，则lmax = l 记Java啊什么的，各种框架用多了，总想着整体设计，但在这里这种思维可能会有点碍事。不要总想着从整体的串上来看，这样要找个这样的子串，要怎么比较呢，太麻烦了。 记得当初上数据结构的时候有一个字符串匹配算法（KMP），然后ACM里有一系列的题，我博客园还有以前的记录，那个记得是要麻烦很多的。 这题一次Ac，还算简单。倒是写这个记录写了半天= =b。嘛，太久不动脑子了，一次Ac还是蛮开心的ヽ(￣▽￣)ﾉ]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Java</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NexT修改背景]]></title>
    <url>%2Fpost%2F4daf947.html</url>
    <content type="text"><![CDATA[修改背景步骤 添加背景图片，到路径next-&gt;source-&gt;images 修改NexT自定义样式文件：next-&gt;source-&gt;css-&gt;_custom-&gt;custom.styl 添加样式代码12345678910111213141516body &#123; background-image: url("/images/background.png"); background-attachment: fixed; /*不随页面移动*/ background-repeat: no-repeat; /*不重复*/ background-position: 50% 50%; /*居中*/ background-size:cover;&#125;/*内容半透明背景*/.header-inner,.content-wrap &#123; background:rgba(255,255,255,0.75) !important;&#125;/*底部连接颜色*/#footer a &#123; color:#eee;&#125;]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【Hexo】标签插件测试]]></title>
    <url>%2Fpost%2F225108ff.html</url>
    <content type="text"><![CDATA[主要是可以自定义一些样式 Hexo标签插件图片在文章中插入指定大小的图片。1234&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125;&lt;!-- 例 --&gt;&#123;% img img-test /assets/images/avatar/avatar.jpg 150 150 图片测试 %&#125; NexT内建标签引用块123456789&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;&lt;!-- 其中 class="blockquote-center" 是必须的 --&gt;&lt;blockquote class="blockquote-center"&gt;blah blah blah&lt;/blockquote&gt;&lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;&#123;% centerquote %&#125;blah blah blah&#123;% endcenterquote %&#125;&lt;!-- 标签别名 --&gt;&#123;% cq %&#125; blah blah blah &#123;% endcq %&#125; blah blah blah 突破容器宽度限制的图片123456789&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;&lt;!-- 其中 class="full-image" 是必须的 --&gt;&lt;img src="/image-url" class="full-image" /&gt;&lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;&#123;% fullimage /image-url, alt, title %&#125;&lt;!-- 别名 --&gt;&#123;% fi /image-url, alt, title %&#125; Bootstrap Callout1234&#123;% note class-name %&#125; Content (md partial supported) &#123;% endnote %&#125;&lt;!-- 例 --&gt;&#123;% note success %&#125; 内容 **加粗** (md partial supported) &#123;% endnote %&#125; 可选class-name为Bootstrap的样式:default、primary、success、info、warning、danger 内容 加粗 内容 加粗 内容 加粗 内容 加粗 内容 加粗 内容 加粗]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>标签插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【VS2015】无法连接FTP服务器]]></title>
    <url>%2Fpost%2F60b740d3.html</url>
    <content type="text"><![CDATA[使用 Visual Studio 2015 时出现的问题 环境：win7 场景 发布Web项目到FTP时 失败，并提示 无法打开网站”ftp://…”。未安装与 FTP 服务器进行通信所需的组件（或”Unable to open the Web site ‘ftp://…’. The components for communicating with FTP servers are not installed.”）* 可以直接使用文件管理器正常访问ftp地址 参考 The components for communicating with FTP servers are not installed.——paaccess Publish with FTP does not work —— kurtdevocht 解决方法安装32位的 Visual C++ Redistributable Packages for Visual Studio 2013 ，然后重启电脑即可 下载链接：vcredist_x86 记考虑把问题翻译成英文以后查，的确能搜到更多的信息]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【LeetCode】TwoSum、AddTwoNumbers]]></title>
    <url>%2Fpost%2F8b21a190.html</url>
    <content type="text"><![CDATA[LeetCode小记好久没写过题目了，思维都僵化了←_←，所以先找点简单些的题目找找感觉。因为现在基本不会用到C/C++，所以使用Java来做。 TwoSum系列题目题意 &gt; 求数组内相加为目标值的两个数的下标 1 Two Sum这题要做出来很简单，但是想优化一下时间复杂度就要思考思考了。第一反应只想到了用Map来存数和下标的键值对，考虑是不是排个序再取个目标值的一半，然后向两边加。但是这样实际上做了层排序，耗费了时间，如果有多个目标值而数组一致的话，可以考虑。当然这里就不是了。 正解：使用Map，来逐个存储数组的数，并在存储前检查Map内是否包含a与将要存储的数b，满足b + a = target，满足则返回a的下标和当前数的下标，否则存储b及下标，然后继续下一个数。 小结：这样省去了查找下标、查到结果以外的无用计算等等。 167 Two Sum II —— Input array is sorted刚好就看到有这题，之前从里往外的算法，实现比较不简洁，看到题解什么的都是从外往里算的，当然这样比较好用while来写。 2 Add Two Numbers题意 &gt; 两个正整数，用单向链表来倒叙表示，链表的每个节点代表数的一位，求相加后的数对应链表。 要点：相加进位，进位的值要加到下一个节点，最高位进位，两个数不同长度的补位 坑：1 + 9,9,9 = 0,0,0,1，这里多次进位 方法：我一开始用的递归实现，因为更好想一点吧（以前一定直接非递归的Orz），每个节点考虑，计算相加的结果，然后填入new的节点t，t的next递归调用传入两个节点对应的next，中间加上判空以及溢出计算就好了。非递归也没有那么麻烦，只是用while来实现子节点的计算。]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Java</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[随笔2017-11-13]]></title>
    <url>%2Fpost%2F6bc11fb5.html</url>
    <content type="text"><![CDATA[Apache、Nginx和Tomcat的不同 Apache和Nginx都是Http Server，主要代理静态Http资源请求，服务器本身不能动态生成页面（可以通过其他模块），Tomcat则是在Apache后加了一层应用，可以代理“动态”资源请求（Jsp、Servlet…)，即动态生成页面等 Nginx常用于反向代理服务器，并发非阻塞，Apache并发阻塞，但稳定 SQL 删除表内所有数据 1TRUNCAT TABLE A; 有条件批量删除数据优化 索引可以提高select的速度，但是会减慢delete的速度，所以，需要有条件大量删除数据时，可以考虑在半夜，备份索引，删除索引，建立删除条件的索引，然后批量删除数据 Docker用于作为各类镜像的容器，提高环境的搭建效率，可以快速便捷的部署到服务器 日常在现在的工作里，越来越觉得以前学的软件工程、算法、计算机网络、Linux什么的都好有用，比那些的框架更有意义。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>SQL</tag>
        <tag>Server</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[随笔2017-11-9]]></title>
    <url>%2Fpost%2Fabffb977.html</url>
    <content type="text"><![CDATA[Vue小记使用侦听属性watch时，属性只有新旧值不同时才会触发 Js小记120 == '' -&gt; true0 === '' -&gt; false Session Session在浏览器关闭后是不会直接自动结束的，重启浏览器重新进入新的会话 Session ID在浏览器中是保存为Cookie的，只是不使用保存在硬盘上的话，会保存在进程中，即内存中。当浏览器关闭，进程下的Cookie自然丢失，重启也就找不到了，只能重启新的会话。 小记： 为了延长登录有效时间，做了定时器来在每次请求后，定时刷新登录状态，但是一直没想好怎么做好随着Session结束，来结束定时器。原来浏览器关闭，Session还没被回收，那也就不用考虑了。做好定时的单例，以及定时的确定会关闭，以及随登录验证来启用结束更重要。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>Vue</tag>
        <tag>JavaScript</tag>
        <tag>Session</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VS快捷键]]></title>
    <url>%2Fpost%2F18caccba.html</url>
    <content type="text"><![CDATA[工具 -&gt; 环境 -&gt; 键盘-&gt; 1. 显示命令包含：搜索要修改的快捷键名字 * 修改显示智能提示的快捷键 名字：视图.显示智能标记 * 修改注释快捷键 搜索：注释 新建快捷键用于 全局 -&gt; 按快捷键 -&gt; 选中输入框，按下要设置的快捷键个人习惯，修改为Ctrl + `]]></content>
      <categories>
        <category>IDE</category>
      </categories>
      <tags>
        <tag>VS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[随笔2017-11-8]]></title>
    <url>%2Fpost%2Fdcf889e1.html</url>
    <content type="text"><![CDATA[问题今天发现对产品业务不够了解的债，要还了。〒▽〒做的工具对后面一个系统来说是没问题的，但是到再后面的系统，问题就放大了。 小结详细的了解别的产品业务也是很有必要的，免得后期做好了再还债。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NexT标签和分类页面]]></title>
    <url>%2Fpost%2F17076.html</url>
    <content type="text"><![CDATA[步骤一新建一个页面，命名为 tags 。命令如下：1$ hexo new page "tags" 步骤二编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下：1234title: tagsdate: 2017-11-6 22:19:52type: "tags"--- 注意：如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，请添加字段 comments 并将值设置为 false，如：12345title: tagsdate: 2017-11-6 22:19:52type: "tags"comments: false--- 步骤三在菜单中添加链接。编辑NexT的配置文件 ，添加 tags 到 menu 中，如下:123456menu: home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive 添加 分类 categories1$ hexo new page "categories" 123456---title: categoriesdate: 2017-11-06 22:07:29type: "categories"comments: false--- 备注如果页面显示不正常，一般都是有地方拼写错了，或者需要清理浏览器缓存]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Maven多模块项目搭建]]></title>
    <url>%2Fpost%2F1ddf75e3.html</url>
    <content type="text"><![CDATA[框架/工具 关键字 Maven SpringBoot Myatis MySQL Tomcat IDEA 部分操作 新建父工程，New &gt; Project &gt; Maven，不使用原型（不勾选Create from archetype） -&gt; 填写项目信息（GroupID:项目组织唯一标识，ArtifactID:项目唯一标识） 删除父工程下src目录 右键项目，新建子模块（New -&gt; Module），填写项目名称，其他默认即可|–&gt; 非web模块，不使用原型新建Maven模块|–&gt; web模块 |-&gt; 使用maven-archetype-webapp构建 |-&gt; Spring Initializr构建Spring相关项目 新建模块： 简单MVC项目结构如下所示： 在各个子模块的pom文件中添加互相的依赖（父工程在前一步自动添加了对应的子模块&lt;modules&gt;） 添加依赖到父工程的pom中（Spring Initializr构建web模块的，把web模块的pom.xml中的依赖改到父工程） 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.8.RELEASE&lt;/version&gt; &lt;relativePath/&gt;&lt;/parent&gt;&lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt;&lt;/properties&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.3.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 然后在父工程pom.xml后添加下面内容 12345678910111213141516171819202122232425&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;!-- The plugin rewrites your manifest --&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.5.8.RELEASE&lt;/version&gt; &lt;configuration&gt;&lt;!-- 指定该Main Class为全局的唯一入口 --&gt; &lt;mainClass&gt;com.like.DemoWebApplication&lt;/mainClass&gt; &lt;layout&gt;ZIP&lt;/layout&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;goals&gt; &lt;goal&gt;repackage&lt;/goal&gt;&lt;!--可以把依赖的包都打包到生成的Jar包中--&gt; &lt;/goals&gt; &lt;!--可以生成不含依赖包的不可执行Jar包--&gt; &lt;!-- configuration&gt; &lt;classifier&gt;exec&lt;/classifier&gt; &lt;/configuration&gt; --&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; web模块pom.xml添加 1234567891011121314151617&lt;build&gt; &lt;!-- 为jar包取名 --&gt; &lt;finalName&gt;demo-start&lt;/finalName&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;skipTests&gt;true&lt;/skipTests&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 右键父项目 &gt; Open Module Settings进入Project Structure &gt; 子模块 &gt; Dependencies &gt; + &gt; Module Dependency，添加子模块需要引用的其他子模块 maven打包 配置启动设置，配置为启动web子模块的配置即可 记录 maven统一打包命令(跳过测试) 1mvn package —Dmaven.test.skip=true 编译/打包报错程序包xxx.xxx.xxx不存在，尝试 1mvn clean 子模块间的引用要写在各自的pom文件里的 &lt;dependencies&gt;中，父工程配置&lt;modules&gt;即可 引用的jar包写在父工程pom的 &lt;dependencies&gt;中]]></content>
      <tags>
        <tag>随笔</tag>
        <tag>Maven</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot搭建体验]]></title>
    <url>%2Fpost%2F5998cfba.html</url>
    <content type="text"><![CDATA[虽然现在不在用Java开发，但是决定了解一下Java Web开发在用的比较新的东西在这记录一下，SpringBoot搭建一个小型项目框架 工具清单JDK IDEA MySQL 框架工具组成SpringBoot + Mybatis + Thymeleaf + Maven 搭建过程 新建工程 -&gt; 选择Spring Initializr -&gt; 选好JDK -&gt; 填好项目信息 选择要集成的框架，这里选基本的SpringBoot项目需要的 Web -&gt; Web Template Engines -&gt; Thymeleaf SQL -&gt; MyBatis JDBC MySQL IDEA搭建好基本框架，Maven添加依赖包 删除application.properties，新建application.yml、application-dev.yml和application-prod.yml，分别作为主配置、开发配置、生成配置文件application.yml:1234567891011121314151617181920212223242526spring: thymeleaf: mode: HTML5 encoding: utf-8 content-type: text/html cache: false profiles: active: dev # 表示使用application-dev.yml datasource: driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=utf8 username: root password: tomcat: initialSize: 1 min-idle: 1 max-idle: 20 max-wait: 60000 timeBetweenEvictionRunsMillis: 60000 minEvictableIdleTimeMillis: 30000 validationQuery: SELECT 1 testWhileIdle: true testOnBorrow: false testOnReturn: falselogging: file: logs/demo.log application-dev.yml:12server: port: 8080 application-prod.yml:1234567server: port: 443 ssl: key-store: classpath:xxx.jks key-store-password: xxx keyStoreType: JKS keyAlias: xxx 然后按照我的SpringBootDemo仓库来建controller什么的，就好了。 好吧，前面好多别人写了很多遍的东西，需要的话看我参考的博客就好了。Thymeleaf之前只撇过几眼，好像跟JSTL有点像，就没注意 Thymeleaf它是一个XML/XHTML/HTML5模板引擎，使用各种包含th:*属性的标签，格式其实和HTML有点不一样，head、body什么的都不一样。 Thymeleaf的url，因为模板里好像不能用&amp;符号，需要&amp;amp;替换，但是官方有对应的标签的12&lt;!-- &lt;a href="/test?id=1&amp;name=2"&gt;a&lt;/a&gt; --&gt;&lt;a th:href="@&#123;/test(id=1, name=2)&#125;"&gt;a&lt;/a&gt; 配置启动设置，添加SpringBoot启动配置，集成了Tomcat的，不用想SpringMVC等等以前的配置Tomcat的配置，Main class就是XxxApplication，选上Use classpath of module和JRE，就可以启动了。 为了开发看起来舒服点，在Project Structure的Modules中设置一下对应文件目录作用，设置一下Main class为Spirng配置文件 小结：框架用起来越来越简单了，但是框架解决的还是那些问题，只是省去了很多复杂的配置，写东西越来越简便，让我这样的“搬砖工”，写逻辑什么的更专注一点吧，或许有一天AI可以写逻辑了，大概就失业了:)]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Web</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL安装]]></title>
    <url>%2Fpost%2F8b39915a.html</url>
    <content type="text"><![CDATA[去官网 -&gt; Other Downloads:Windows (x86, 64-bit), ZIP Archive -&gt; 下载mysql社区版压缩包 解压到要安装的目录，如：D:\Program Files\mysql-8.0.11-winx64 在根目录下新建my.ini，如下： 12345678910111213141516171819[mysql]# 设置mysql客户端默认字符集default-character-set=utf8[mysqld]# 设置3306端口port = 3306# 设置mysql的安装目录basedir="D:\Program Files\mysql-5.7.20-winx64"# 设置mysql数据库的数据的存放目录datadir="D:\Program Files\mysql-5.7.20-winx64\data"# 允许最大连接数max_connections=200# 服务端使用的字符集默认为8比特编码的latin1字符集character-set-server=utf8# 创建新表时将使用的默认存储引擎default-storage-engine=INNODB# sql规则sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' cmd，cd进入D:\Program Files\mysql-8.0.11-winx64\bin目录，执行以下命令： 1234567&gt; mysqld installService successfully installed.&gt; mysqld --initialize-insecure --user=mysql&gt; net start mysql MySQL 服务正在启动 . MySQL 服务已经启动成功。 这时候MySQL已经启动了，端口什么的如my.ini配置 但是为了全局使用，需要在环境变量Path添加D:\Program Files\mysql-8.0.11-winx64\bin （一开始下了个mysql-8.0.11-winx64.zip，还以为是msi文件压缩了一下呢。- -||]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[随笔2017-11-01]]></title>
    <url>%2Fpost%2F433774cf.html</url>
    <content type="text"><![CDATA[重装折腾win7，没关闭更新，更新100+补丁还失败还原，各种dll丢失。报错大致如下： D3DCompiler_47.dll、api-ms-win-core-libraryloader-l1-2-1.dll、gfx.dll……丢失 启动Word2016、SS和MSSQL Server MS的时候(依赖都比较新的软件)报错，缺少net46。报错大致如下: ““的类型初始值设定项引发异常缺少”.Net Framework 4.6” 原因：D3DCompiler_47.dll丢失，因为更新补丁失败还原的缘故其他的是卸载了或者本来就缺新的.Net Framework 解决方法： 打补丁Windows6.1-KB4019990-x64.msu，应该是补上D3DCompiler_47.dll一系列的库的。Win32Exception (0x80004005): 找不到指定的模块 重装电脑里版本需要的.Net框架，打完补丁就可以装了，一般运行的话装个比较高版本的就好，我装的是.Net Framework4.7，会修复版本.Net框架“缺少”之类的问题。 注：.Net Fx出现无法安装之类的问题见本文最后以上。结果弄了好几天。(╯‵□′)╯︵┻━┻ 插曲1 2017-11-2 15:00:26今天本来以为已经搞定了，结果发现VS2015里没有.Net Framework 4.5，于是又开始折腾。。。目前更糟糕了，VS起不来了，报没有.Net Fx4.6，然而卸载程序里面明明有的。未完待续，好烦。 插曲2 2017-11-2 16:49:13 首先，卸载明明安装着的.Net Fx 4.6是不明智的 其次，修复VS更是浪费青春 然后，重装电脑里最新的.Net Fx，我的是4.7，然后4.6的问题就解决了。但是并不能解决.Net Fx 4.5没有的问题，正在去官网下载4.5.2的Dev-Pack，328M，感觉装完有应该就会有4.5了 最后，吐槽一下，公司网真烂，太烂了，下载页好久才打开，加上电脑也烂，不然早弄好了 插曲终 2017-11-3 14:03:10问题原因：本机上有 net45 的文件没删干净，所以安装不了，但是肯定缺少文件了解决办法：.net framework 的安装目录在 C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5清理干净，或者直接从其他电脑拷一份过来就好了。 完结撒花。]]></content>
      <tags>
        <tag>随笔</tag>
        <tag>DotNet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【C#】预编译SQL]]></title>
    <url>%2Fpost%2F9dae95bf.html</url>
    <content type="text"><![CDATA[C#中预编译SQL方法如下：12// System.Data.Entity.Databaseint ExecuteSqlCommand(string sql, params object[] parameters); 使用EF6框架，仓库使用生成的数据库上下文：1private EFDbContext dbctx = new EFDbContext(); 使用示例：12345// 删除tableA中，name以"$"结尾的数据string sql = "DELETE FROM tableA WHRER name like \"%@sign\"";int result = dbctx.Database.ExecuteSqlCommand(sql, new SqlParameter("sign", "$") ); 查询方法，如下：12345678var parameters = new SqlParameter[] &#123; new SqlParameter("name", name), new SqlParameter("age", age)&#125;;string sql = $"select * from user where name = @name and age = @age";var l = db.Database.SqlQuery&lt;User&gt;(sql, parameters).ToList();]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>CSharp</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[随笔2017-10-26]]></title>
    <url>%2Fpost%2F57d9e48b.html</url>
    <content type="text"><![CDATA[这两天稍微有点时间，简单看了看设计模式，感觉比上次理解多了，或许是要自己实际解决的问题更多了吧。 除了工厂模式、单例模式、MVC模式等等很经常使用的模式以外，享元、适配器等等各种模式也都有了自己理解的应用场景，我想，下次再看应该会更有感触吧。 回想很多大学里学的知识，也都是慢慢的觉得很有用处，当然这里也没有得后悔当初为什么没有好好学了，只能叹息有时间再补吧。]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sublime记录]]></title>
    <url>%2Fpost%2Ff04b92fe.html</url>
    <content type="text"><![CDATA[设置记录sublime.setting-user1234567891011121314&#123; "color_scheme": "Packages/Theme - Afterglow/Afterglow-markdown.tmTheme", "expand_tabs_on_save": true, "font_size": 13, "ignored_packages": [ "Markdown", "Vintage" ], "tab": 2, "translate_tabs_to_spaces": true, "default_encoding": "UTF-8", "update_check": false&#125;]]></content>
      <tags>
        <tag>随笔</tag>
        <tag>Sublime</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sublime Terminal]]></title>
    <url>%2Fpost%2F49a0138a.html</url>
    <content type="text"><![CDATA[无论是用Sublime写前端，还是写Markdown，经常要用到终端，每次Win+R再cmd也是麻烦 Package Control -&gt; Terminal 设置Setting-Default，就是有&quot;termainal&quot;:这个参数的设置文件，改成下面设置，即可Ctrl+Alt+T启动普通cmd了（不改的话，默认为启动Power Shell） 12345&#123; // Replace with your own path to cmder.exe "terminal": "cmd", "parameters": ["/START", "%CWD%"]&#125; Sublime插件-Terminal的Github]]></content>
      <tags>
        <tag>随笔</tag>
        <tag>Sublime</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[简历]]></title>
    <url>%2Fpost%2F963f9cce.html</url>
    <content type="text"><![CDATA[准备中… ## 个人简历### 基本信息||||||:-:|:-:|:-:|:-:||求职状态：|准备中……|毕业工作时间：|2017.6 ||现工作地：|浙江嘉兴|期望工作地点：|上海 |### 教育经历学校：华侨大学 学历：本科专业：软件工程 时间：2013.9 ~ 2017.6### 工作经验一、蓝鸽科技有限公司职位：.Net开发工程师 &nbsp;&nbsp;&nbsp; 工作时间：2017.6 ~ 今主要工作：1. 数据采集平台：对公司众多应用系统的数据进行采集、清洗、补全以及存储2. 数据模拟工具：模拟大量的应用系统数据二、中电福富有限公司职位：Java开发工程师 &nbsp;&nbsp;&nbsp; 工作时间：2016.11 ~ 2017.4主要工作：1. CRM系统开发维护2. 电渠平台3. O2O订单中台管理系统]]></content>
      <tags>
        <tag>resume</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git命令]]></title>
    <url>%2Fpost%2Fb6ef4fe0.html</url>
    <content type="text"><![CDATA[强制更新覆盖本地 12345git fetch --all # 下载最新文件（未覆盖）git reset --hard origin/master # 定向最新下载版本git pull origin master # 更新，已经同步远程最新文件git pull origin master --allow-unrelated-histories # 允许无关联历史 分支变更回退 12345678910$ git reflog # 所有分支的所有操作记录272c92d (HEAD -&gt; master, origin/master) HEAD@&#123;0&#125;: reset: moving to HEAD272c92d (HEAD -&gt; master, origin/master) HEAD@&#123;1&#125;: reset: moving to origin/masterb6acea6 HEAD@&#123;2&#125;: commit: update3041a64 HEAD@&#123;3&#125;: commit: init1718038 HEAD@&#123;4&#125;: commit: update ignoref85aa76 HEAD@&#123;5&#125;: commit: init90ba2c6 HEAD@&#123;6&#125;: commit (initial): init$ git reset --hard b6acea6 # 回退到之前版本 删除已纳入版本控制，并后添加到.gitignore的文件（注意.） 123git rm -r --cached .git add .git commit -m "update .gitignore" 修改已commit备注 输入 1git commit --amend 进入最后一次提交的内容（vim编辑器） &gt; a进入插入模式 &gt; 修改 &gt; Esc &gt; 输入:wq，保存退出]]></content>
      <tags>
        <tag>随笔</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo搭建]]></title>
    <url>%2Fpost%2F57ee7c1d.html</url>
    <content type="text"><![CDATA[教程http://blog.csdn.net/gdutxiaoxu/article/details/53576018 主题github地址yilia https://github.com/litten/hexo-theme-yilia.gitNexT https://github.com/iissnan/hexo-theme-next.git hexo配置http://blog.csdn.net/xuezhisdc/article/details/53130383 新建文章1hexo new post "article title" 生成部署1234hexo g # 生成hexo d # 部署# 或直接hexo d -g # 在部署前先生成 记录 部署：将生成在public文件夹内的文件复制到deploy.git内后，自动推送到git，自动部署需要安装插件，并配置发布地址等 新建文章的 命名、分类、标签：不能包含#符号，Github上面会404，其他的\/.?之类的应该也不行，-_以及数字是可以的 自定义页面，不渲染hexo跳过指定文件的渲染在_config.yml文件中设置skip_render，都是相对source目录的路径： 跳过source目录下的test.html: test.html```12* 跳过`source`目录下`test`文件夹内所有文件：```skip_render: test/* 跳过source目录下test文件夹内所有文件包括子文件夹以及子文件夹内的文件： test/**```12345* 跳过多个路径：```ymlskip_render: - test.html - test/* _post文件夹下是可以新建自己的文件夹的 hexo标签插件jsFiddle在文章中嵌入 jsFiddle。1&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125; Gist在文章中嵌入 Gist。1&#123;% gist gist_id [filename] %&#125; iframe在文章中插入 iframe。1&#123;% iframe url [width] [height] %&#125; Image在文章中插入指定大小的图片。1&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125; Link在文章中插入链接，并自动给外部链接添加 target=”_blank” 属性。1&#123;% link text url [external] [title] %&#125; 代码块高亮c#代码块标记（c#标记无效）：cs、csharp配置文件类型（*:*这种）：yml]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于]]></title>
    <url>%2Fabout%2Findex.html</url>
    <content type="text"><![CDATA[回头写点什么。]]></content>
  </entry>
  <entry>
    <title><![CDATA[categories]]></title>
    <url>%2Fcategories%2Findex.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[tags]]></title>
    <url>%2Ftags%2Findex.html</url>
    <content type="text"></content>
  </entry>
</search>
